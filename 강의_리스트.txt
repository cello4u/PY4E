제 8장 파이썬 리스트
1. 프로그래밍
  가. 알고리즘: 문제를 해결하는 데 사용하는 일련의 규칙 또는 단계
  나. 자료 구조: 컴퓨터에서 자료를 구성하는 특별한 방법

2. "컬렉션"이 아닌 것은?
  가. 대부분의 변수는 한 값만을 갖음
  나. 변수에 새 값을 대입하면, 이전 값에 덮어씌워 짐.

3. 리스트는 컬렉션의 일종
  가. 컬렉션은 하나의 '변수'에 많은 값을 넣을 수 있음
  나. 컬렉션을 쓰면 많은 변수를 전부 하나의 편리한 꾸러미에 넣어다닐 수 있어서 유용
  다. 예시
    - friends = [ 'Joseph', 'Glenn', 'Sally']

4. 리스트 상수
  가. 리스트 상수는 대괄호로 둘러싸여 있고 리스트의 원소는 반점으로 구분됨
  나. 리스트는 파이썬의 어떤 객체도 원소로 넣을 수 있음
  다. 심지어 다른 리스트를 넣는 것도가능
  라. 빈 리스트도 생성 가능

5. 리스트의 내부
  가. 문자열과 마찬가지로, 대괄호를 이용한 인덱스로 리스트의 원소 하나하나를 가져올 수 있음
  나. 예시문
    >>> friends = [ 'Joseph', 'Glenn', 'Sally' ]
    >>> print(friends[1])
    Glenn

6. 리스트는 변경 가능
  가. 문자열은 “변경 불가”
    (1) 문자열의 내용을 변경할 수 없음
    (2) 변경하려면 새 문자열을 만들어야 함
    (3) 예시문
      >>> fruit = 'Banana'
      >>> fruit[0] = 'b'
      Traceback
      TypeError: 'str' object does not
      support item assignment
  나. 리스트는 “변경 가능”
    (1) 인덱스 연산자를 사용하여 리스트의 요소를 변경 가능
    (2) 예시문
      >>> x = fruit.lower()
      >>> print(x)
      banana
      >>> lotto = [2, 14, 26, 41, 63]
      >>> print(lotto)
      [2, 14, 26, 41, 63]
      >>> lotto[2] = 28
      >>> print(lotto)
      [2, 14, 28, 41, 63]

7. 리스트의 길이는?
  가. lne() 함수는 리스트를 매개 변수로 받고 리스트의 원소 개수를 반환함
  나. 예시문
    >>> x = [1,2,'joe',99]
    >>> print(len(x))
    4
  다. 사실 len() 함수는 아무 집합이나 시퀀스(예: 문자열)를 받아 원소의 개수를 반환함

8. range 함수 사용하기
  가. range 함수는 0부터 매개 변수로 넣은 값보다 1작은 범위의 수까지로 구성된 숫자 리스트를 반환
  나. for 문과 정수 반복자를 통해 인덱스 루프를 구성 가능
  다. 예시문
    >>> print(range(4))
    [0,1,2,3]
    >>> friends = ['Joseph', 'Glenn', 'Sally']
    >>> print(len(friends))
    3
    >>> print(range(len(friends)))
    [0,1,2]
  라. 두 가지 루프 이야기: 아래 for 루프 모두 같은 결과
    friends = ['Joseph', 'Glenn', 'Sally']

    for friend in friends :
      print('Happy New Year:', friend)

    for i in range(len(friends)) :
      friend = friends[i]
      print('Happy New Year:', friend)

9. 리스트 활용
  가. +를 사용하여 리스트 연결하기
    (1) 기존에 존재하는 두 리스트를 더하여 새로운 리스트 생성 가능
    (2) 예시문
      >>> a = [1,2,3]
      >>> b = [4,5,6]
      >>> c= a+b
      >>> print(c)
      [1,2,3,4,5,6]
  나. :를 사용하여 리스트 자르기
    >>> t = [9, 41, 12, 3, 74, 15]
    >>> t[1:3]
    [41,12]
    >>> t[:4]
    [9, 41, 12, 3]
    >>> t[3:]
    [3, 74, 15]
    >>> t[:]
    [9, 41, 12, 3, 74, 15]
  다. 주의: 문자열과 마찬가지로, 괄호 안의 두 번째 숫자 “직전”까지(미만)만 포함

10. 리스트 메서드
  >>> x = list()
  >>> type(x)
  <type 'list'>
  >>> dir(x)
  ['append', 'count', 'extend', 'index', 'insert',
  'pop', 'remove', 'reverse', 'sort']
  >>>

11. 리스트를 처음부터 만들기
  가. 빈 리스트를 만들고 append 메서드를 이용하여 원소를 추가할 수 있음
  나. 리스트 안은 순서가 유지되고 새 원소는 리스트 끝에 더해짐
  다. 예시문
    >>> stuff = list()
    >>> stuff.append('book')
    >>> stuff.append(99)
    >>> print(stuff)
    ['book', 99]

12. 리스트 원소 탐색
  가. 파이썬은 특정 원소가 리스트에 있는지를 확인할 수 있는 두 가지의 연산자를 제공함
  나. 둘다 참(True)과 거짓(False)을 반환하는 논리 연산자
  다. 리스트를 바꾸지는 않음
  라. 예시문
    >>> some = [1, 9, 21, 10, 16]
    >>> 9 in some
    True
    >>> 15 in some
    False
    >>> 20 not in some
    True

13. 리스트에는 순서가 있다.
 가. 리스트는 많은 아이템을 보관할 수 있고 사용자가 순서를 바꾸기 위해 별도의 행동을 하지 않는 한 아이템의 순서를 유지
 나. 리스트는 정렬 가능
 다. sort 메서드는 "스스로를 정렬"하는 기능(문자열과는 다름)
 라. 예시문
    >>> friends = [ 'Joseph', 'Glenn', 'Sally' ]
    >>> friends.sort()
    >>> print(friends)
    ['Glenn', 'Joseph', 'Sally']
    >>> print(friends[1])
    Joseph
    >>>

14. 내장 함수와 리스트
  가. 파이썬에는 리스트를 매개 변수로 받는 내장 함수가 여러 가지 있음.
  나. 예시문
    >>> nums = [3, 41, 12, 9, 74, 15]
    >>> print(len(nums))
    6
    >>> print(max(nums))
    74
    >>> print(min(nums))
    3
    >>> print(sum(nums))
    154
    >>> print(sum(nums)/len(nums))
    25.6
  다. 다른 방법이지만 결과는 동일
    (1) 방법1
      total = 0
      count = 0
      while True:
        inp = input('Enter a number: ')
        if inp == 'done': break
        value = int(inp)
        value = total + value
        count = count + 1
      average = total / count
      print ('Average:', average)
    (2) 방법2
      numlist = list()
      while True:
        inp = input('Enter a number: ')
        if inp == 'done': break
        value = int('inp')
        numlist.append(value)
      average = sum(numlist) / len(numlist)
      print ('Average:', average)

15. 문자열과 리스트
  가. split 함수는 문자열을 작게 나누고 문자열로 구성된 리스트를 생성.
  나. 이 문자열은 단오로 볼 수 있음
  다. 특정 단어에 접근하거나 모든 단어에 대해 루프를 실행할 수 있음.
  라. 예시문
    >>> abc = 'With three words'
    >>> stuff = abc.split()
    >>> print(stuff)
    ['With', 'three', 'words']
    >>> print(len(stuff))
    3
    >>> print(stuff[0])
    With

    >>> print(stuff)
    ['With', 'three', 'words']
    >>> for w in stuff :
    ... print(w)
    ...
    With
    Three
    Words
    >>>
  마. 구획문자
    (1) 구획 문자를 별도로 설정하지 않으면, 여러 칸의 공백도 하나의 구획 문자(여기서는 공백)로 여겨짐
    (2) 문장을 나눌 때 어떤 구획 문자를 사용할지 정할 수 있음.
    (3) 예시문
    >>> line = 'A lot             of spaces'
    >>> etc = line.split()
    >>> print(etc)
    ['A', 'lot', 'of', 'spaces']
    >>>
    >>> line = 'first;second;third'
    >>> thing = line.split()
    >>> print(thing)
    ['first;second;third']
    >>> print(len(thing))
    1
    >>> thing = line.split(';')
    >>> print(thing)
    ['first', 'second', 'third']
    >>> print(len(thing))
    3
  바. 응용: From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008
    (1) fhand = open('mbox-short.txt')
        for line in fhand:
          line = line.rstrip()
          if not line.startswith('From ') : continue
          words = line.split()
          print(words[2])
        Sat
        Fri
        Fri
        ...
    (2) >>> line = 'From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008'
        >>> words = line.split()
        >>> print(words)
        ['From', 'stephen.marquard@uct.ac.za', 'Sat', 'Jan', '5', '09:14:16', '2008']
        >>>

16. 이중으로 나누는 패턴
  가. 문장을 하나의 구획 문자로 나누고 그 조각 중일부를 다시 다른 구획 문자로 나누는 패턴
  나. 예시문: From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008
    words = line.split()
    email = words[1]  # stephen.marquard@uct.ac.za
    pieces = email.split('@')  # ['stephen.marquard', 'uct.ac.za']
    print(pieces[1])
    'uct.ac.za

제 9장 파이썬 딕셔너리
1. 컬렉션 이란?
  가. 컬렉션은 한 가지 이상의 값을 넣고
  나. 한꺼번에 가지고 돌아다닐 수 있어서 편리함
  다. 여러 개의 값을 하나의 “변수”에 담을 수 있음
  라. 변수 “안”에 공간을 여러 개 가짐
  마. 변수 안에서 서로 다른 공간을 찾는 방법이 있음

2. 두 가지 컬렉션
  가. 리스트: 순서를 유지하는 값들의 선형 컬렉션
  나. 딕셔너리: 고유의 라벨을 갖고 있는 값을 넣는 '가방'

3. 딕셔너리
  가. 개념
    (1) 파이썬의 가장 강력한 데이터 컬렉션
    (2) 파이썬에서 빠르게 데이터베이스 같은 연산을 가능하게 함
    (3) 다른 언어에서는 다른 이름으로 불림
      (가) Associative Arrays (연관 배열) - Perl / PHP
      (나) Properties or Map or HashMap (속성, 맵, 해쉬맵) - Java
      (다) Property Bag (속성 가방) - C# / .Net
  나. 특징
    (1) 리스트는 리스트 안에서 원소의 위치를 기반으로 인덱스를 매김
    (2) 딕셔너리는 가방과 같음 - 순서가 없음
    (3) 따라서 딕셔너리에 넣는 대상은 “조회 태그”를 달아 인덱스를 매김
    (4) 예시문
      >>> purse = dict()
      >>> purse['money'] = 12
      >>> purse['candy'] = 3
      >>> purse['tissues'] = 75
      >>> print(purse)
      {'money': 12, 'tissues': 75, 'candy': 3}
      >>> print(purse['candy'])
      3
      >>> purse['candy'] = purse['candy'] + 2
      >>> print(purse)
      {'money': 12, 'tissues': 75, 'candy': 5}
  다. 리스트와 딕셔너리 비교
    (1) 딕셔너리는 값을 찾기 위해 숫자 대신 키를 사용하는 것만 빼면 리스트와 동일
    (2) 예시문
      (가) 리스트
        >>> lst = list()
        >>> lst.append(21)
        >>> lst.append(183)
        >>> print(lst)
        [21, 183]
        >>> lst[0] = 23
        >>> print(lst)
        [23, 183]
      (나) 딕셔너리
        >>> ddd = dict()
        >>> ddd['age'] = 21
        >>> ddd['course'] = 182
        >>> print(ddd)
        {'course': 182, 'age': 21}
        >>> ddd['age'] = 23
        >>> print(ddd)
        {'course': 182, 'age': 23}
    마. 딕셔너리 표현(상수)
      (1) 딕셔너리는 중괄호로 표현하며 키 : 값 쌍 목록을 가짐
      (2) 사이가 비어있는 중괄호로 빈 딕셔너리를 만들 수 있음
        >>> jjj = { 'chuck' : 1 , 'fred' : 42, 'jan': 100}
        >>> print(jjj)
        {'jan': 100, 'chuck': 1, 'fred': 42}
        >>> ooo = { }
        >>> print(ooo)
        {}
        >>>
4. 딕셔너리리를 이용한 여러 카운터
  가. 딕셔너리의 일반적인 활용법 중 하나
    (1) 대상이 얼마나 자주보이는지를 "세는" 카운팅
    (2) 예시문
      >>> ccc = dict()
      >>> ccc['csev'] = 1
      >>> ccc['cwen'] = 1
      >>> print(ccc)
      {'csev': 1, 'cwen': 1}
      >>> ccc['cwen'] = ccc['cwen'] + 1
      >>> print(ccc)
      {'csev': 1, 'cwen': 2}
  나. 딕셔너리 Traceback 에러
    (1) 딕셔너리에 없는 키를 참조하는 것은 오류를 일으킴
    (2) in 연산자를 사용하여 키가 딕셔너리에 있는지 확인 가능
    (3) 예시문
      >>> ccc = dict()
      >>> print(ccc['csev'])
      Traceback (most recent call last):
       File "<stdin>", line 1, in <module>
      KeyError: 'csev'
      >>> 'csev' in ccc
      False
  다. 새로운 이름을 보는 경우
    (1) 새로운 이름을 보게 되면, 딕셔너리에 새 원소를 집어넣어야 함.
    (2) 두 번째 혹은 그 이상 이름을 보게 되는 경우라면, 딕셔너리에서 해당 이름에 대응되는 값에 1을 더함.
    (3) 예시문
      counts = dict()
      names = ['csev', 'cwen', 'csev', 'zqian', 'cwen']
      for name in names:
        if name not in counts:
          count[name] = 1
        else:
          counts[name] = counts[name] + 1
      print(counts)

5. 딕셔너리의 get 메서드
  가. 키값의 유무를 확인하고, 없다면 기본값으로 설정하는 확인하는 패턴을 메서드화 한 것이 get()
  나. 키가 딕셔너리에 없는 경우 기본값으로 여김 (Traceback 에러 없음)
  다. 예시문
    if name in counts:
      x = counts[name]
    else :
      x = 0

    x = counts.get(name, 0)

    {'csev': 2, 'zqian': 1, 'cwen': 2}
  라. get()을 이용한 간소화된 숫자 세기
    (1) 키가 아직 사전에 없으면 get()을 사용하여 기본값으로 0을 줄 수 있음. 그리고 1을 더함
    (2) 예시문
      counts = dict()
      names = ['csev', 'cwen', 'csev', 'zqian', 'cwen']
      for name in names :
        counts[name] = counts.get(name, 0) + 1
      print(counts)
      >>>{'csev': 2, 'zqian': 1, 'cwen': 2}

6. 텍스트에서 단어 수 세기
  가. 카운팅 패턴
    (1) 텍스트의 한 줄 안에 있는 단어 수를 셀 때, 일반적으로 split으로 나누어 루프에 넣고, 단어별로 수를 추적하기 위해 딕셔너리를 사용
    (2) 예시문
      counts = dict()
      print('Enter a line of text:')
      line = input('')
      words = line.split()
      print('Words:', words)
      print('Counting...')
      for word in words:
      counts[word] = counts.get(word,0) + 1
      print('Counts', counts)

7. 유한 루프와 딕셔너리
  가. 딕셔너리 안에는 저장되는 순서가 없다고 해도, for 문을 작성하여 딕셔너리의 모든 원소를 돌 수 있음 - 딕셔너리의 모든 키를 거쳐가며 값을 찾음.
  나. 예시문
    >>> counts = { 'chuck' : 1 , 'fred' : 42, 'jan': 100}
    >>> for key in counts:
    ... print(key, counts[key])
    ...
    jan 100
    chuck 1
    fred 42
    >>>

8. 키와 값 목록 검색
  가. 딕셔너리에서 키나 값이나 아이템 (키와 값 쌍)의 목록을 얻을 수 있음
  나. 예시문
    >>> jjj = { 'chuck' : 1 , 'fred' : 42, 'jan': 100}
    >>> print(list(jjj))
    ['jan', 'chuck', 'fred']
    >>> print(jjj.keys())
    ['jan', 'chuck', 'fred']
    >>> print(jjj.values())
    [100, 1, 42]
    >>> print(jjj.items())
    [('jan', 100), ('chuck', 1), ('fred', 42)]
    >>>

9. 보너스: 두 개의 반복 변수!
  가. '두 개'의 반복 변수를 사용하여 딕셔너리의 키-값 쌍을 반복해서 다룸.
  나. 매번 반복할 때, 첫 번째 변수는 키를, 두 번째 변수는 키에 대응하는 값을 나타냄
  다. 예시문
    jjj = { 'chuck' : 1 , 'fred' : 42, 'jan': 100}
    for aaa, bbb in jjj.items() :
      print(aaa,bbb)

    jan 100
    chuck 1
    fred 42

10. 텍스트 파일을 열어서 가장 많이 나온 단어와 그 개수 산출
# 파일 열기
name = input('Enter file name:')
handle = open(name)

# 파일 속 단어 딕셔너리 생성
counts=dict()
for line in handle:
  words = line.split()
  for word in words:
    counts[word] = counts.get(word, 0) + 1

# 가장 많이 나온 단어와 개수
bigcount = None
bigword = None
for word, count in counts.items():
  if bigcount = None or count > bigcount:
    bigword = word
    bigcount = count

# 결과 출력
  print(bigword, bigcount)
